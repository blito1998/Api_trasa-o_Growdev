import express, { Request, Response, NextFunction } from 'express';
import { v4 as uuidv4 } from 'uuid';

interface User {
  id: string;
  name: string;
  cpf: string;
  email: string;
  age: number;
  transactions: Transaction[];
}

interface Transaction {
  id: string;
  title: string;
  value: number;
  type: 'income' | 'outcome';
}

const app = express();

app.use(express.json());

const users: User[] = [];


function checkUserExists(req: Request, res: Response, next: NextFunction) {
  const { userId } = req.params;
  const user = users.find((user) => user.id === userId);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  next();
}


function checkTransactionExists(req: Request, res: Response, next: NextFunction) {
  const { userId, transactionId } = req.params;
  const user = users.find((user) => user.id === userId);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  const transaction = user.transactions.find((transaction) => transaction.id === transactionId);

  if (!transaction) {
    return res.status(404).json({ error: 'Transaction not found' });
  }

  next();
}


app.post('/users', (req: Request, res: Response) => {
  const { name, cpf, email, age } = req.body;

  const existingUser = users.find((user) => user.cpf === cpf);

  if (existingUser) {
    return res.status(400).json({ error: 'User with this CPF already exists' });
  }

  const user: User = {
    id: uuidv4(),
    name,
    cpf,
    email,
    age,
    transactions: [],
  };

  users.push(user);

  return res.status(201).json(user);
});


app.get('/users/:id', (req: Request, res: Response) => {
  const { id } = req.params;

  const user = users.find((user) => user.id === id);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  
  const { transactions, ...userData } = user;

  return res.json(userData);
});


app.get('/users', (req: Request, res: Response) => {
  const { name, email, cpf } = req.query;

  let filteredUsers = users;

  if (name) {
    filteredUsers = filteredUsers.filter((user) => user.name.includes(name as string));
  }

  if (email) {
    filteredUsers = filteredUsers.filter((user) => user.email.includes(email as string));
  }

  if (cpf) {
    filteredUsers = filteredUsers.filter((user) => user.cpf.includes(cpf as string));
  }

 
  const usersData = filteredUsers.map(({ transactions, ...userData }) => userData);

  return res.json(usersData);
});


app.put('/users/:id', checkUserExists, (req: Request, res: Response) => {
  const { id } = req.params;
  const { name, email, age } = req.body;

  const user = users.find((user) => user.id === id);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  user.name = name || user.name;
  user.email = email || user.email;
  user.age = age || user.age;

  return res.json(user);
});


app.delete('/users/:id', checkUserExists, (req: Request, res: Response) => {
  const { id } = req.params;

  const userIndex = users.findIndex((user) => user.id === id);

  if (userIndex < 0) {
    return res.status(404).json({ error: 'User not found' });
  }

  users.splice(userIndex, 1);

  return res.status(204).send();
});


app.post('/users/:userId/transactions', checkUserExists, (req: Request, res: Response) => {
  const { userId } = req.params;
  const { title, value, type } = req.body;

  const user = users.find((user) => user.id === userId);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  const transaction: Transaction = {
    id: uuidv4(),
    title,
    value,
    type,
  };

  user.transactions.push(transaction);

  return res.status(201).json(transaction);
});


app.get('/users/:userId/transactions/:id', checkUserExists, checkTransactionExists, (req: Request, res: Response) => {
  const { userId, id } = req.params;

  const user = users.find((user) => user.id === userId);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  const transaction = user.transactions.find((transaction) => transaction.id === id);

  if (!transaction) {
    return res.status(404).json({ error: 'Transaction not found' });
  }

  return res.json(transaction);
});


app.get('/users/:userId/transactions', checkUserExists, (req: Request, res: Response) => {
  const { userId } = req.params;
  const { title, type } = req.query;

  const user = users.find((user) => user.id === userId);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  let filteredTransactions = user.transactions;

  if (title) {
    filteredTransactions = filteredTransactions.filter((transaction) => transaction.title.includes(title as string));
  }

  if (type) {
    filteredTransactions = filteredTransactions.filter((transaction) => transaction.type === type);
  }

  const totalIncome = filteredTransactions
    .filter((transaction) => transaction.type === 'income')
    .reduce((total, transaction) => total + transaction.value, 0);

  const totalOutcome = filteredTransactions
    .filter((transaction) => transaction.type === 'outcome')
    .reduce((total, transaction) => total + transaction.value, 0);

  const totalCredit = totalIncome - totalOutcome;

  return res.json({
    transactions: filteredTransactions,
    total: {
      income: totalIncome,
      outcome: totalOutcome,
      credit: totalCredit,
    },
  });
});


app.put('/users/:userId/transactions/:id', checkUserExists, checkTransactionExists, (req: Request, res: Response) => {
  const { userId, id } = req.params;
  const { title, value, type } = req.body;

  const user = users.find((user) => user.id === userId);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  const transaction = user.transactions.find((transaction) => transaction.id === id);

  if (!transaction) {
    return res.status(404).json({ error: 'Transaction not found' });
  }

  transaction.title = title || transaction.title;
  transaction.value = value || transaction.value;
  transaction.type = type || transaction.type;

  return res.json(transaction);
});


app.delete('/users/:userId/transactions/:id', checkUserExists, checkTransactionExists, (req: Request, res: Response) => {
  const { userId, id } = req.params;

  const user = users.find((user) => user.id === userId);

  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  const transactionIndex = user.transactions.findIndex((transaction) => transaction.id === id);

  if (transactionIndex < 0) {
    return res.status(404).json({ error: 'Transaction not found' });
  }

  user.transactions.splice(transactionIndex, 1);

  return res.status(204).send();
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
